use("libraryCampus");
db.usuario.updateOne(
  {
    cc: 1,
  },
  {
    $push: {
      reportes: {
        id: 2,
        fecha: "2023-09-20",
        motivo: "demora",
        comentario: "no entrega los libros en la fecha estimada",
      },
    },
  }
);
use("libraryCampus");
db.usuario.findOne({ cc: 1 }, { reportes: { $elemMatch: { id: 2 } } });

use("libraryCampus");
db.usuario.aggregate(
  {
    $match: {
      cc: 1,
    },
  },
  {
    $project: {
      _id: 0,
      reportes: {
        $filter: {
          input: "$reportes",
          as: "reporte",
          cond: { $eq: ["$$reporte.id", 2] },
        },
      },
    },
  }
);

use("libraryCampus");
db.usuario.aggregate(
  {
    $match: {
      cc: 15433,
    },
  },
  {
    $project: {
      _id: 0,
      reportes: 1,
    },
  }
);
use("libraryCampus");
let copia = db.libro.findOne({
  titulo: "Libro 2",
});
let {
  editorial,
  fecha_publicacion,
  genero,
  idioma,
  sinopsis,
  portada,
  paginas,
  estado,
  cantidad,
  ...nuevaCopia
} = copia;
let entrega = new Date("2023-09-15").toLocaleDateString();
let devolucion = new Date("2023-09-18").toISOString();
let fechaEntrega = {
  entrga: entrega,
  devolucion: devolucion,
};
Object.assign(nuevaCopia, fechaEntrega);

db.usuario.updateOne(
  {
    cc: 12,
  },
  {
    $push: {
      prestamos: nuevaCopia,
    },
  }
);
//Mostrar todos los libros disponibles en la biblioteca.
use("libraryCampus");
db.libro.aggregate({
  $project: {
    _id: 0,
  },
});

//Encontrar todos los libros escritos por un autor específico.
use("libraryCampus");
db.libro.aggregate(
  {
    $match: { autor: "Autor 1" },
  },
  {
    $project: { _id: 0 },
  }
);

//Listar todos los libros en préstamo en este momento.
use("libraryCampus");
db.usuario.aggregate([
  {
    $unwind: "$prestamos",
  },
  {
    $group: {
      _id: null,
      prestamos: { $push: "$prestamos" },
    },
  },
  {
    $addFields: {
      LibrosPrestadosEnesteMomento: "$prestamos",
    },
  },
  {
    $unwind: "$LibrosPrestadosEnesteMomento",
  },
  {
    $project: {
      _id: 0,
      LibrosPrestadosEnesteMomento: 1,
    },
  },
]);
//Encontrar todos los libros que están atrasados en la devolución.
use("libraryCampus");
db.usuario.aggregate([
  {
    $unwind: "$prestamos",
  },
  {
    $match: {
      "prestamos.devolucion": { $gt: new Date().toISOString() },
    },
  },
  {
    $project: {
      _id: 0,
      nombre_completo: 1,
      "prestamos.titulo": 1,
      "prestamos.autor": 1,
      "prestamos.devolucion": 1,
    },
  },
]);

//Mostrar la cantidad de ejemplares disponibles para un libro en particular.
use("libraryCampus");
db.libro.aggregate([
  {
    $match: {
      titulo: "Libro 1"
    }
  },
  {
    $project: {
      _id: 0,
      titulo: 1,
      cantidad: 1,
      precio: 1
    }
  }
]);
//Obtener una lista de todos los autores distintos en la biblioteca.\
use("libraryCampus")
db.libro.distinct("autor")
///Encontrar los libros que han sido prestados por un usuario específico.
use("libraryCampus")
db.usuario.aggregate([
  {
    $match: {
      nombre_completo: "Nicolas"
    }
  }, {
    $unwind: "$prestamos"
  },
  {
    $project: {
      _id: 0,
      prestamos: 1,
    }
  }
])

//Mostrar los usuarios que tienen deudas
use("libraryCampus")
db.usuario.aggregate([
  {
    $match: {
      deuda: { $gt: 0 }
    }
  }, {
    $unwind: "$deuda"
  },
  {
    $project: {
      _id: 0,
      deuda: 1,
    }
  }
])
//Encontrar todos los libros publicados en un año específico.
use("libraryCampus")
db.libro.aggregate([{
  $match: {
    fecha_publicacion: { $gte: new Date("2015-01-01").toISOString(), $lte: new Date("2015-12-31").toISOString() }
  }
}])


//Listar los usuarios que tienen un libro en préstamo en este momento.

use("libraryCampus")
db.usuario.aggregate({
  $match: {
    "prestamos": { $gt: [] }
  }
})
//Mostrar la fecha de devolución más próxima para un usuario en particular.

use("libraryCampus")
db.usuario.aggregate({
  $unwind: "$prestamos"
}, {

  $match: {
    "prestamos.devolucion": { $gt: new Date().toISOString() }
  }
})

//Encontrar todos los libros que pertenecen a una categoría específica.

use("libraryCampus")
db.libro.aggregate({
  $match:{
    "genero":"Terror"
  }
})
//Listar los usuarios que tienen multas por un monto superior a un valor determinado.

use("libraryCampus")
db.usuario.aggregate({
  $match:{
    deuda:{$gt:100}
  }
})